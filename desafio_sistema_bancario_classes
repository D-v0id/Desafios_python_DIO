from abc import ABC, abstractmethod
from datetime import date
from typing import List

class Transacao(ABC):
    @abstractmethod
    def registrar(self, conta):
        pass

class Deposito(Transacao):
    def __init__(self, valor: float):
        self._valor = valor
    
    @property
    def valor(self):
        return self._valor
    
    def registrar(self, conta):
        sucesso = conta.depositar(self.valor)
        if sucesso:
            conta.historico.adicionar_transacao(self)

class Saque(Transacao):
    def __init__(self, valor: float):
        self._valor = valor
    
    @property
    def valor(self):
        return self._valor
    
    def registrar(self, conta):
        sucesso = conta.sacar(self.valor)
        if sucesso:
            conta.historico.adicionar_transacao(self)

class Historico:
    def __init__(self):
        self._transacoes: List[Transacao] = []
    
    @property
    def transacoes(self):
        return self._transacoes
    
    def adicionar_transacao(self, transacao: Transacao):
        self._transacoes.append(transacao)

class Cliente:
    def __init__(self, endereco: str):
        self._endereco = endereco
        self._contas: List[Conta] = []
    
    @property
    def endereco(self):
        return self._endereco
    
    @property
    def contas(self):
        return self._contas
    
    def realizar_transacao(self, conta, transacao: Transacao):
        transacao.registrar(conta)
    
    def adicionar_conta(self, conta):
        self._contas.append(conta)

class PessoaFisica(Cliente):
    def __init__(self, cpf: str, nome: str, data_nascimento: date, endereco: str):
        super().__init__(endereco)
        self._cpf = cpf
        self._nome = nome
        self._data_nascimento = data_nascimento
    
    @property
    def cpf(self):
        return self._cpf
    
    @property
    def nome(self):
        return self._nome
    
    @property
    def data_nascimento(self):
        return self._data_nascimento

class Conta:
    def __init__(self, numero: int, cliente: Cliente):
        self._saldo = 0.0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()
    
    @property
    def saldo(self) -> float:
        return self._saldo
    
    @property
    def numero(self) -> int:
        return self._numero
    
    @property
    def agencia(self) -> str:
        return self._agencia
    
    @property
    def cliente(self) -> Cliente:
        return self._cliente
    
    @property
    def historico(self) -> Historico:
        return self._historico
    
    @classmethod
    def nova_conta(cls, cliente: Cliente, numero: int):
        return cls(numero, cliente)
    
    def sacar(self, valor: float) -> bool:
        if valor <= 0:
            print("Operação falhou: O valor deve ser positivo.")
            return False
        
        if valor > self._saldo:
            print("Operação falhou: Saldo insuficiente.")
            return False
        
        self._saldo -= valor
        print(f"Saque de R$ {valor:.2f} realizado com sucesso!")
        return True
    
    def depositar(self, valor: float) -> bool:
        if valor <= 0:
            print("Operação falhou: O valor deve ser positivo.")
            return False
        
        self._saldo += valor
        print(f"Depósito de R$ {valor:.2f} realizado com sucesso!")
        return True

class ContaCorrente(Conta):
    def __init__(self, numero: int, cliente: Cliente, limite: float = 500.0, limite_saques: int = 3):
        super().__init__(numero, cliente)
        self._limite = limite
        self._limite_saques = limite_saques
        self._numero_saques = 0
    
    @property
    def limite(self) -> float:
        return self._limite
    
    @property
    def limite_saques(self) -> int:
        return self._limite_saques
    
    def sacar(self, valor: float) -> bool:
        if valor <= 0:
            print("Operação falhou: O valor deve ser positivo.")
            return False
        
        if self._numero_saques >= self._limite_saques:
            print("Operação falhou: Número máximo de saques excedido.")
            return False
        
        if valor > 500:
            print("Operação falhou: O valor do saque excede o limite de R$ 500,00.")
            return False
        
        limite_total = self._saldo + self._limite
        if valor > limite_total:
            print(f"Operação falhou: Saldo e limite insuficientes. Disponível: R$ {limite_total:.2f}")
            return False
        
        if valor <= self._saldo:
            self._saldo -= valor
        else:
            valor_restante = valor - self._saldo
            self._saldo = 0
            self._limite -= valor_restante
        
        self._numero_saques += 1
        print(f"Saque de R$ {valor:.2f} realizado com sucesso!")
        return True

# Funções auxiliares para a interface do usuário
def menu_principal():
    print("\n" + "=" * 40)
    print("SISTEMA BANCÁRIO")
    print("=" * 40)
    print("[1] Cadastrar Usuário")
    print("[2] Cadastrar Conta Corrente")
    print("[3] Listar Contas")
    print("[4] Acessar Conta")
    print("[0] Sair")
    return input("=> ").strip()

def menu_conta():
    print("\n" + "=" * 30)
    print("OPERAÇÕES DA CONTA")
    print("=" * 30)
    print("[1] Depositar")
    print("[2] Sacar")
    print("[3] Extrato")
    print("[4] Voltar ao Menu Principal")
    return input("=> ").strip()

def cadastrar_usuario(usuarios: List[PessoaFisica]):
    cpf = input("Informe o CPF (somente números): ").strip()
    
    if any(usuario.cpf == cpf for usuario in usuarios):
        print("Erro: Já existe usuário com esse CPF!")
        return usuarios, False
    
    nome = input("Informe o nome completo: ").strip()
    data_nascimento_str = input("Informe a data de nascimento (dd-mm-aaaa): ").strip()
    endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/UF): ").strip()
    
    try:
        dia, mes, ano = map(int, data_nascimento_str.split('-'))
        data_nascimento = date(ano, mes, dia)
    except:
        print("Erro: Data de nascimento inválida!")
        return usuarios, False
    
    usuario = PessoaFisica(cpf, nome, data_nascimento, endereco)
    usuarios.append(usuario)
    print("Usuário cadastrado com sucesso!")
    return usuarios, True

def cadastrar_conta_corrente(contas: List[ContaCorrente], usuarios: List[PessoaFisica], numero_conta: int):
    cpf = input("Informe o CPF do usuário: ").strip()
    
    usuario = next((u for u in usuarios if u.cpf == cpf), None)
    
    if not usuario:
        print("Erro: Usuário não encontrado! Cadastre o usuário primeiro.")
        return contas, False
    
    conta = ContaCorrente(numero_conta, usuario)
    usuario.adicionar_conta(conta)
    contas.append(conta)
    print(f"Conta corrente criada com sucesso! Número: {numero_conta}")
    return contas, True

def listar_contas(contas: List[ContaCorrente]):
    if not contas:
        print("Nenhuma conta cadastrada.")
        return
    
    print("\n" + "=" * 50)
    print("CONTAS CADASTRADAS")
    print("=" * 50)
    for conta in contas:
        print(f"Agência: {conta.agencia}")
        print(f"C/C: {conta.numero}")
        print(f"Titular: {conta.cliente.nome}")
        print(f"CPF: {conta.cliente.cpf}")
        print(f"Saldo: R$ {conta.saldo:.2f}")
        print("-" * 30)

def selecionar_conta(contas: List[ContaCorrente]):
    if not contas:
        print("Nenhuma conta cadastrada.")
        return None
    
    listar_contas(contas)
    
    try:
        numero = int(input("\nInforme o número da conta: "))
        conta = next((c for c in contas if c.numero == numero), None)
        
        if conta:
            return conta
        else:
            print("Conta não encontrada.")
            return None
    except ValueError:
        print("Número de conta inválido.")
        return None

def exibir_extrato(conta: ContaCorrente):
    print("\n" + "=" * 60)
    print("EXTRATO BANCÁRIO")
    print("=" * 60)
    
    if not conta.historico.transacoes:
        print("Não foram realizadas movimentações.")
    else:
        for transacao in conta.historico.transacoes:
            if isinstance(transacao, Deposito):
                print(f"Depósito: R$ {transacao.valor:.2f}")
            elif isinstance(transacao, Saque):
                print(f"Saque: R$ {transacao.valor:.2f}")
    
    print(f"\nSaldo atual: R$ {conta.saldo:.2f}")
    print(f"Limite disponível: R$ {conta.limite:.2f}")
    print(f"Limite total para saque: R$ {conta.saldo + conta.limite:.2f}")
    print("=" * 60)

def main():
    usuarios: List[PessoaFisica] = []
    contas: List[ContaCorrente] = []
    numero_conta = 1

    while True:
        opcao = menu_principal()

        if opcao == "1":
            usuarios, sucesso = cadastrar_usuario(usuarios)
            
        elif opcao == "2":
            if not usuarios:
                print("Cadastre pelo menos um usuário primeiro!")
            else:
                contas, sucesso = cadastrar_conta_corrente(contas, usuarios, numero_conta)
                if sucesso:
                    numero_conta += 1
            
        elif opcao == "3":
            listar_contas(contas)
            
        elif opcao == "4":
            conta = selecionar_conta(contas)
            if conta:
                while True:
                    opcao_conta = menu_conta()
                    
                    if opcao_conta == "1":
                        try:
                            valor = float(input("Informe o valor do depósito: "))
                            deposito = Deposito(valor)
                            conta.cliente.realizar_transacao(conta, deposito)
                        except ValueError:
                            print("Operação falhou: valor informado não é numérico.")
                    
                    elif opcao_conta == "2":
                        try:
                            valor = float(input("Informe o valor do saque: "))
                            saque = Saque(valor)
                            conta.cliente.realizar_transacao(conta, saque)
                        except ValueError:
                            print("Operação falhou: valor informado não é numérico.")
                    
                    elif opcao_conta == "3":
                        exibir_extrato(conta)
                    
                    elif opcao_conta == "4":
                        break
                    
                    else:
                        print("Operação inválida!")
            
        elif opcao == "0":
            print("Obrigado por usar nosso sistema bancário!")
            break
        
        else:
            print("Operação inválida!")

if __name__ == "__main__":
    main()